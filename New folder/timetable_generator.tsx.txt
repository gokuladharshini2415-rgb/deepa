import React, { useState, useEffect } from 'react';
import { Calendar, Clock, Users, BookOpen, RefreshCw, Settings, Plus, Trash2 } from 'lucide-react';

const TimetableGenerator = () => {
  const [subjects, setSubjects] = useState([
    { id: 1, name: 'Mathematics', faculty: 'Dr. Smith', hoursPerWeek: 4, color: '#3B82F6' },
    { id: 2, name: 'Physics', faculty: 'Prof. Johnson', hoursPerWeek: 3, color: '#EF4444' },
    { id: 3, name: 'Chemistry', faculty: 'Dr. Brown', hoursPerWeek: 3, color: '#10B981' },
    { id: 4, name: 'English', faculty: 'Ms. Davis', hoursPerWeek: 2, color: '#8B5CF6' },
  ]);
  
  const [constraints, setConstraints] = useState({
    maxClassesPerDay: 6,
    workingDays: 5,
    slotsPerDay: 8,
    startTime: '09:00',
    slotDuration: 60
  });

  const [facultyAvailability, setFacultyAvailability] = useState({
    'Dr. Smith': { unavailable: [] },
    'Prof. Johnson': { unavailable: ['Friday-3', 'Friday-4'] },
    'Dr. Brown': { unavailable: ['Monday-1'] },
    'Ms. Davis': { unavailable: [] }
  });

  const [timetable, setTimetable] = useState({});
  const [conflicts, setConflicts] = useState([]);

  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
  
  const generateTimeSlots = () => {
    const slots = [];
    let currentTime = new Date(`2024-01-01 ${constraints.startTime}`);
    
    for (let i = 0; i < constraints.slotsPerDay; i++) {
      const timeStr = currentTime.toTimeString().slice(0, 5);
      slots.push(`${timeStr}`);
      currentTime.setMinutes(currentTime.getMinutes() + constraints.slotDuration);
    }
    return slots;
  };

  const timeSlots = generateTimeSlots();

  const isSlotUnavailable = (faculty, day, slotIndex) => {
    const slotKey = `${day}-${slotIndex + 1}`;
    return facultyAvailability[faculty]?.unavailable.includes(slotKey);
  };

  const generateTimetable = () => {
    const newTimetable = {};
    const newConflicts = [];
    const facultySchedule = {};

    // Initialize empty timetable
    days.forEach(day => {
      newTimetable[day] = new Array(constraints.slotsPerDay).fill(null);
    });

    // Initialize faculty schedules
    subjects.forEach(subject => {
      if (!facultySchedule[subject.faculty]) {
        facultySchedule[subject.faculty] = {};
        days.forEach(day => {
          facultySchedule[subject.faculty][day] = new Array(constraints.slotsPerDay).fill(false);
        });
      }
    });

    // Sort subjects by hours per week (descending) for better allocation
    const sortedSubjects = [...subjects].sort((a, b) => b.hoursPerWeek - a.hoursPerWeek);

    // Allocate classes for each subject
    sortedSubjects.forEach(subject => {
      let allocatedHours = 0;
      const targetHours = subject.hoursPerWeek;

      for (let dayIndex = 0; dayIndex < days.length && allocatedHours < targetHours; dayIndex++) {
        const day = days[dayIndex];
        
        for (let slotIndex = 0; slotIndex < constraints.slotsPerDay && allocatedHours < targetHours; slotIndex++) {
          // Check constraints
          const dayClassCount = newTimetable[day].filter(slot => slot !== null).length;
          
          if (dayClassCount >= constraints.maxClassesPerDay) continue;
          if (newTimetable[day][slotIndex] !== null) continue;
          if (isSlotUnavailable(subject.faculty, day, slotIndex)) continue;
          if (facultySchedule[subject.faculty][day][slotIndex]) continue;

          // Allocate the slot
          newTimetable[day][slotIndex] = {
            subject: subject.name,
            faculty: subject.faculty,
            color: subject.color,
            id: subject.id
          };
          
          facultySchedule[subject.faculty][day][slotIndex] = true;
          allocatedHours++;
        }
      }

      // Check if subject got enough hours
      if (allocatedHours < targetHours) {
        newConflicts.push(`${subject.name} needs ${targetHours} hours but only got ${allocatedHours}`);
      }
    });

    setTimetable(newTimetable);
    setConflicts(newConflicts);
  };

  const addSubject = () => {
    const newId = Math.max(...subjects.map(s => s.id)) + 1;
    const colors = ['#F59E0B', '#EC4899', '#6366F1', '#14B8A6', '#F97316'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    
    setSubjects([...subjects, {
      id: newId,
      name: `Subject ${newId}`,
      faculty: 'New Faculty',
      hoursPerWeek: 2,
      color: randomColor
    }]);
  };

  const removeSubject = (id) => {
    setSubjects(subjects.filter(s => s.id !== id));
  };

  const updateSubject = (id, field, value) => {
    setSubjects(subjects.map(s => 
      s.id === id ? { ...s, [field]: value } : s
    ));
  };

  useEffect(() => {
    generateTimetable();
  }, [subjects, constraints, facultyAvailability]);

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center gap-3">
            <Calendar className="text-blue-600" />
            AI Timetable Generator
          </h1>
          <p className="text-gray-600">Generate optimized class schedules with automatic conflict resolution</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Configuration Panel */}
          <div className="lg:col-span-1 space-y-6">
            {/* Subjects */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold flex items-center gap-2">
                  <BookOpen className="text-green-600" size={20} />
                  Subjects
                </h2>
                <button
                  onClick={addSubject}
                  className="flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 text-sm"
                >
                  <Plus size={16} />
                  Add
                </button>
              </div>
              
              <div className="space-y-3">
                {subjects.map(subject => (
                  <div key={subject.id} className="border rounded-md p-3">
                    <div className="flex items-center justify-between mb-2">
                      <input
                        type="text"
                        value={subject.name}
                        onChange={(e) => updateSubject(subject.id, 'name', e.target.value)}
                        className="font-medium text-sm bg-transparent border-none p-0 focus:ring-0"
                      />
                      <button
                        onClick={() => removeSubject(subject.id)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                    <input
                      type="text"
                      placeholder="Faculty"
                      value={subject.faculty}
                      onChange={(e) => updateSubject(subject.id, 'faculty', e.target.value)}
                      className="w-full text-xs text-gray-600 bg-gray-50 border border-gray-200 rounded px-2 py-1 mb-2"
                    />
                    <div className="flex items-center gap-2">
                      <label className="text-xs text-gray-500">Hours/week:</label>
                      <input
                        type="number"
                        min="1"
                        max="10"
                        value={subject.hoursPerWeek}
                        onChange={(e) => updateSubject(subject.id, 'hoursPerWeek', parseInt(e.target.value))}
                        className="w-16 text-xs border border-gray-200 rounded px-2 py-1"
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Constraints */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Settings className="text-orange-600" size={20} />
                Constraints
              </h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Max Classes/Day</label>
                  <input
                    type="number"
                    min="3"
                    max="10"
                    value={constraints.maxClassesPerDay}
                    onChange={(e) => setConstraints({...constraints, maxClassesPerDay: parseInt(e.target.value)})}
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                  <input
                    type="time"
                    value={constraints.startTime}
                    onChange={(e) => setConstraints({...constraints, startTime: e.target.value})}
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Slot Duration (minutes)</label>
                  <select
                    value={constraints.slotDuration}
                    onChange={(e) => setConstraints({...constraints, slotDuration: parseInt(e.target.value)})}
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                  >
                    <option value={45}>45 minutes</option>
                    <option value={60}>60 minutes</option>
                    <option value={90}>90 minutes</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Generate Button */}
            <button
              onClick={generateTimetable}
              className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 flex items-center justify-center gap-2 font-medium"
            >
              <RefreshCw size={20} />
              Regenerate Timetable
            </button>

            {/* Conflicts */}
            {conflicts.length > 0 && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h3 className="font-medium text-red-800 mb-2">Scheduling Conflicts</h3>
                <ul className="text-sm text-red-700 space-y-1">
                  {conflicts.map((conflict, index) => (
                    <li key={index}>• {conflict}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          {/* Timetable Display */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm overflow-hidden">
              <div className="bg-gray-50 px-6 py-4 border-b">
                <h2 className="text-xl font-semibold flex items-center gap-2">
                  <Clock className="text-purple-600" size={20} />
                  Generated Timetable
                </h2>
              </div>
              
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b">Time</th>
                      {days.map(day => (
                        <th key={day} className="px-4 py-3 text-center text-sm font-medium text-gray-700 border-b min-w-32">
                          {day}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {timeSlots.map((time, slotIndex) => (
                      <tr key={slotIndex} className="hover:bg-gray-50">
                        <td className="px-4 py-3 text-sm font-medium text-gray-600 border-b bg-gray-50">
                          {time}
                        </td>
                        {days.map(day => {
                          const classInfo = timetable[day]?.[slotIndex];
                          return (
                            <td key={day} className="px-2 py-3 border-b text-center">
                              {classInfo ? (
                                <div
                                  className="rounded-md p-2 text-white text-xs font-medium shadow-sm"
                                  style={{ backgroundColor: classInfo.color }}
                                >
                                  <div className="font-semibold">{classInfo.subject}</div>
                                  <div className="opacity-90">{classInfo.faculty}</div>
                                </div>
                              ) : (
                                <div className="h-12 flex items-center justify-center text-gray-300">
                                  Free
                                </div>
                              )}
                            </td>
                          );
                        })}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Statistics */}
            <div className="mt-6 bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Users className="text-indigo-600" size={20} />
                Schedule Statistics
              </h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div className="bg-blue-50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-blue-600">
                    {subjects.reduce((sum, s) => sum + s.hoursPerWeek, 0)}
                  </div>
                  <div className="text-sm text-blue-700">Total Hours</div>
                </div>
                <div className="bg-green-50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-green-600">
                    {Object.values(timetable).reduce((sum, day) => 
                      sum + day.filter(slot => slot !== null).length, 0
                    )}
                  </div>
                  <div className="text-sm text-green-700">Scheduled</div>
                </div>
                <div className="bg-orange-50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-orange-600">
                    {[...new Set(subjects.map(s => s.faculty))].length}
                  </div>
                  <div className="text-sm text-orange-700">Faculty</div>
                </div>
                <div className="bg-purple-50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-purple-600">
                    {conflicts.length}
                  </div>
                  <div className="text-sm text-purple-700">Conflicts</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TimetableGenerator;